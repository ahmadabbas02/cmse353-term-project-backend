// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String /// @encrypted
  role     String @default("Student")

  student Student?
  parent  Parent?
  teacher Teacher?
  chair   Chair?
}

model Student {
  id         String @id @default(uuid())
  fullName   String
  department String @default("Software Engineering")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  parent   Parent? @relation(fields: [parentId], references: [id], onDelete: SetNull)
  parentId String?

  courses           CourseGroup[]
  attendanceRecords AttendanceRecord[]
}

model Parent {
  id       String @id @default(uuid())
  fullName String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  children Student[]
}

model Teacher {
  id       String @id @default(uuid())
  fullName String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  courseGroups CourseGroup[]
}

model Chair {
  id         String @id @default(uuid())
  fullName   String
  department String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model CourseGroup {
  id   String @id @default(uuid())
  name String @unique

  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String

  students          Student[]
  attendanceRecords AttendanceRecord[]
}

model AttendanceRecord {
  id String @id @default(uuid())

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String

  courseGroup   CourseGroup @relation(fields: [courseGroupId], references: [id], onDelete: Cascade)
  courseGroupId String

  dateTime DateTime

  isPresent Boolean @default(false)
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
